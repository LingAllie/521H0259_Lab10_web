<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.socket.io/4.6.0/socket.io.min.js"
        integrity="sha384-c79GN5VsunZvi+Q/WObgk2in0CbZsHnjEqvFxC5DxHn9lTfNce2WW6h2pH6u/kF+"
        crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <title>Danh sách người dùng</title>
    <style>
        * {
            box-sizing: border-box;
        }

        .user {
            display: flex;
            align-items: center;
            padding: 12px 24px;
            cursor: pointer;
        }

        .user:nth-child(odd) {
            background-color: #f4f5f7;
        }

        .user:hover {
            background-color: #E6EFFF;
            transition: 0.3s;
        }

        .avatar {
            font-weight: bold;
            font-size: 1.5rem;
            background-color: deepskyblue;
            width: 50px;
            height: 50px;
            margin-right: 16px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
        }

        .user-info {
            height: 50px;
            flex-grow: 1;
        }

        .user-name {
            font-size: 1.1rem;
        }

        .user-info .online {
            font-size: 0.9rem;
            color: rgb(99, 99, 99);
        }

        .user .status {
            width: 90px;
            text-align: center;
        }

        .user:hover {
            background-color: #E6EFFF;
        }

        .user:hover .avatar {
            background-color: rgb(7, 142, 204);
            transition: 0.3s;
        }

        .user:hover .user-name {
            font-weight: 450;
            transition: 0.3s;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-7">
                <div class="rounded border mt-5 mb-3">
                    <h4 class="text-primary text-center my-5">Danh sách người dùng trực tuyến</h4>
                    <p style="padding: 0 24px;">Số người online: <strong id="online-count" class="badge badge-danger">0</strong> </p>
                    <div id="user-list" class="people">

                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>

    <div id="online-notification" class="alert alert-success d-inline position-fixed small"
        style="position: fixed; left: 0;">
        <strong>Trần Quang Trí</strong> vừa mới online
    </div>

    <div id="offline-notification" class="alert alert-danger d-inline position-fixed small"
        style="position: fixed; right: 0px">
        <strong>Trần Quang Trí</strong> đã thoát khỏi ứng dụng
    </div>

    <script>

        let socket;
        let username;
        let onlineUsers = [];

        window.onload = () => {
            socket = io();
            socket.on('connect', handleConnectionSuccess)
            socket.on('disconnect', () => console.log("no oke"))
            socket.on('list-users', handleUserList)
            socket.on('new-user', handleNewUser)
            socket.on('user-leave', handleUserLeave)
            socket.on('register-name', handleRegisteringUsername)


            //an thong bao khi trang vua load
            $('#online-notification').fadeTo(10, 0)
            $('#offline-notification').fadeTo(10, 0)
        }


        function handleRegisteringUsername(data) {
            let { id, username } = data
            let user = onlineUsers.find(u => u.id == id)
            if (!user) {
                return console.log('Cannot find user !');
            }

            user.username = username
            console.log(`Client ${id} has regitered name: ${username}`);

            displayUser(user)

            notifyOnline(user.username)

        }

        function handleConnectionSuccess() {
            console.log('Connect successfully with id ' + socket.id);
            setTimeout(() => {
                username = sessionStorage.getItem('username')
                if (username) {
                    console.log("Username has been read from session storage");
                }
                if (!username) {
                    username = prompt('Enter your name')
                    sessionStorage.setItem('username', username)
                    console.log("Username has been saved in session storage");
                }
                socket.emit('register-name', username); //send name to server
                document.title = 'You are ' + username
            }, 500)
        }

        function handleUserList(users) {
            console.log("Da nhan danh sach user online tu server")
            users.forEach(u => {
                console.log(u);
                if (u.id !== socket.id) {
                    onlineUsers.push(u); //add users into list except myself
                    displayUser(u);
                }
            });
        }

        function handleNewUser(user) {
            console.log(`Mot nguoi moi da ket noi. Except you, room has ${onlineUsers.length + 1} user(s) in total`);
            console.log(user);
            onlineUsers.push(user); //add new user into list
        }

        function handleUserLeave(id) {

            let user = onlineUsers.find(u => u.id === id)

            onlineUsers = onlineUsers.filter(u => u.id != id)
            if (onlineUsers.length > 0) {
                console.log(`User ${id} has left. Except you, just ${onlineUsers.length} user(s) still online`);
            } else {
                console.log(`User ${id} has left, only you in room`);
            }
            removeUser(id);
            notifyOffline(user.username)
        }

        function displayUser(user) {

            let status = user.free ? '<div class="badge badge-success badge-pill">Đang rảnh</div>' : '<div class="badge badge-warning badge-pill">Đang bận</div>';
            let userDiv = $(`
                        <div id="${user.id}" class="user">
                            <div class="avatar">${user.username[0]}</div>
                            <div class="user-info">
                                <div class="user-name">${user.username}</div>
                                <div class="online">Truy cập lúc: ${user.loginAt}</div>
                            </div>
                            <div class="status">
                                ${status}
                            </div>
                        </div> `)


            $(`#user-list`).append(userDiv)
            $('#online-count').html($('#user-list .user').length)
        }

        function removeUser(id) {
            $(`#${id}`).remove();
            $('#online-count').html($('#user-list .user').length)
        }

        function notifyOnline(username) {
            $('#online-notification strong').html(username);
            $('#online-notification').fadeTo(2000, 1); // show
            setTimeout(() => {
                $('#online-notification').fadeTo(2000, 0); // hide
                $('#online-notification').remove();
            }, 1000);
        }

        function notifyOffline(username) {
            $('#offline-notification strong').html(username);
            $('#offline-notification').fadeTo(2000, 1); // show
            setTimeout(() => {
                $('#offline-notification').fadeTo(2000, 0); // hide
                $('#offline-notification').remove();
            }, 1000);
        }


    </script>
</body>

</html>